# 해당 파이프라인은 GitLab CI Template 프로젝트에서 가져와서 설정하기 때문에 프로젝트 접근 권한이 있어야합니다.
# 만약 접근 권한이 없을 경우, 해당 CI 파일을 직접 가져와서 로컬에서 사용해도 됩니다.
# 또한 GitLab CI 파이프라인은 overriding이 가능하기때문에 템플릿을 가져와서 커스텀을 할 수도 있습니다.
# 참고: https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - secret_detection
  - lint
  - test
  - build-and-push-app
  - container_test
  - triage-dry-run
  - generate-openapi-docs-html
  - build-and-push-mkdocs
  - triage-run


include:
  - project: wisenut-research/starter/gitlab-ci-template
    ref: main
    file:
      - templates/Security/Secret-Detection.gitlab-ci.yml
      - templates/Python/Dependency-Management.gitlab-ci.yml
      # - templates/Python/Lint.gitlab-ci.yml
      # - templates/Python/Test.gitlab-ci.yml
      - templates/Python/Openapi.gitlab-ci.yml
      - templates/Python/Deploy.gitlab-ci.yml
      - templates/Security/Container-Scanning.gitlab-ci.yml
      - templates/Mkdocs/api/Openapi-Docs.gitlab-ci.yml
      - templates/Mkdocs/common/Mkdocs.gitlab-ci.yml
  - component: $CI_SERVER_FQDN/components/gitlab-triage/gitlab-triage@0.1.2
    inputs:
      stage: triage-dry-run
      api_token: $API_TOKEN   # $API_TOKEN bot 실행을 위한 Access Token 이름
      debug: true
      dry_run: true
      helpers_file: ./.gitlab/helpers.rb
      job_suffix: ':dry-run'
    rules:
      - if: $CI_PIPELINE_SOURCE != "schedule"
  - component: $CI_SERVER_FQDN/components/gitlab-triage/gitlab-triage@0.1.2
    inputs:
      stage: triage-run
      api_token: $API_TOKEN
      debug: true
      helpers_file: ./.gitlab/helpers.rb
      job_suffix: ':schedule'
    rules:
      - if: $CI_PIPELINE_SOURCE == "schedule"
