image: python:3.9.13-slim

stages:
  - validate
  - check_error
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIPELINE_SEQUENCE: $CI_PIPELINE_IID
  TZ: "Asia/Seoul"
  # for secret-detection
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SECRET_DETECTION_IMAGE_SUFFIX: ""
  SECRETS_ANALYZER_VERSION: "5"
  SECRET_DETECTION_EXCLUDED_PATHS: ""

cache:
  paths:
    - .cache/pip
    - venv
    - .mypy_cache/

before_script:
  - |
    if [[ "$CI_JOB_NAME" == ".secret-analyzer-job" || \
          "$CI_JOB_NAME" == "secret_detection" || \
          "$CI_JOB_NAME" == "check_error" ]]; then 
      echo "Skipping before_script";
    else 
      echo "Running before_script tasks for $CI_JOB_NAME";
      python3 -V
      pip install --upgrade pip
      pip install poetry
      poetry config virtualenvs.create false --local
      poetry install --no-root
    fi

.secret-analyzer:
  stage: validate
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: true
  variables:
    GIT_DEPTH: "50"
  # `rules` must be overridden explicitly by each child job
  # see https://gitlab.com/gitlab-org/gitlab/-/issues/218444
  artifacts:
    paths:
      - gl-secret-detection-report.json

secret_detection:
  extends: .secret-analyzer
  rules:
    - if: $SECRET_DETECTION_DISABLED == 'true' || $SECRET_DETECTION_DISABLED == '1'
      when: never
    - if: $CI_COMMIT_BRANCH
  script:
    - /analyzer run

check_error:
  stage: check_error
  script:
    - apt-get update
    - apt-get install -y jq
    - cat gl-secret-detection-report.json
    - |
      if jq -e '.vulnerabilities | length > 0' gl-secret-detection-report.json >/dev/null; then
        echo "Error: Secret leak detected!"
        exit 1
      fi
  dependencies:
    - secret_detection

unit-test-job:
  stage: test
  script:
    - |
      set -o allexport
      source .env
      VERSION=${MAJOR_VERSION}.$(date +'%y%m.%d')-${STATUS}-$CI_COMMIT_SHORT_SHA
      set +o allexport
    - BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')
    - export PYTHONPATH=./app
    - pytest --cov --cov-report term --cov-report xml:coverage.xml --junitxml=report.xml -v tests
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

ruff-lint-test-job:
  stage: test
  script:
    - ruff check .

mypy-lint-test-job:
  stage: test
  script:
    - mypy .

pyright-lint-test-job:
  stage: test
  script:
    - pyright ./

deploy-gitlab-job:
  image: docker:24.0.5
  stage: deploy
  services:
    - docker:24.0.5-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache tzdata
    - export TZ=Asia/Seoul  # TODO: 아직까지도 UTC Timezone으로 설정됨
    - |
      set -o allexport
      source .env
      VERSION=${MAJOR_VERSION}.$(date +'%y%m.%d')-${STATUS}-$CI_COMMIT_SHORT_SHA
      set +o allexport
    - IMAGE_TAG=$CI_REGISTRY_IMAGE:$VERSION
    - IMAGE_TAG_LATEST=$CI_REGISTRY_IMAGE:latest
    - BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')
    - |
      echo "version: str = '$VERSION'" > version_info.py
      echo "git_branch: str = '$CI_COMMIT_BRANCH'" >> version_info.py
      echo "git_revision: str = '$CI_COMMIT_SHA'" >> version_info.py
      echo "git_short_revision: str = '$CI_COMMIT_SHORT_SHA'" >> version_info.py
      echo "build_date: str = '$BUILD_DATE'" >> version_info.py
  script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true # 마지막 이미지 가져오기
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE:latest -t $IMAGE_TAG -t $IMAGE_TAG_LATEST . # 마지막 이미지를 캐시로 사용
    - docker push $IMAGE_TAG
    - docker push $IMAGE_TAG_LATEST
  only:
    - main